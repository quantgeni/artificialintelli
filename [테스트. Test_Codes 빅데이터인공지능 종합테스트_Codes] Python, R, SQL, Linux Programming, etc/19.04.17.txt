1. 클래스명은 Staff으로 정한다 (5점)

2. 생성자, setter/getter, 문자열화 함수등을 작성한다 (30점)
    
3. 'Ernie' 직원 정보를 객체화해서 Staff 클래스의 printBIO() 라는 
함수 호출시 다음과 같이 결과가 출력되도록 코드를 작성한다 (15점)
"Ernie 직원은 나이가 23이고, 성별은 남자입니다"

*상기 1~3 전체 답안 (하단. 단, #는 주석임)

class Staff:
#생성자 __init__
    def __init__(self,empid,name,deptname,gender,tech,age):
        self.__empid=empid
        self.__name=name
        self.__deptname=deptname
        self.__gender=gender
        self.__tech=tech
        self.__age=age

#문자열화 함수 (단, 테이블 상 gender가 'M' 또는 'F'로 저장된 것을 감안, 하기와 같이 각각 '남자', '여자' 변환 if조건문을 추가함)
    def printBIO(self):
        if self.__gender=='M':self.__gender='남자'
        else:self.__gender='여자'
        msg='%s 직원은 나이가 %d이고, 성별은 %s입니다' %(self.__name,self.__age,self.__gender)
        return msg
    
#setter/getter
    @property
    def empid(self):
        return self.__empid
    
    @empid.setter
    def name(self,empid):
        self.__empid=empid

    @property
    def name(self):
        return self.__name
    
    @name.setter
    def name(self,name):
        self.__name=name

    @property
    def deptname(self):
        return self.__deptname
    
    @deptname.setter
    def deptname(self,deptname):
        self.__deptname=deptname
        
    @property
    def gender(self):
        return self.__gender
    
    @gender.setter
    def gender(self,gender):
        self.__gender=gender
        
    @property
    def tech(self):
        return self.__tech
    
    @tech.setter
    def tech(self,tech):
        self.__tech=tech
        
    @property
    def age(self):
        return self.__age
    
    @age.setter
    def age(self,age):
        self.__age=age 

#Ernie 직원 정보 객체화 (instantiate)
Ernie=Staff(3,'Ernie','Sales','M','UNIX,Perl',23)

#printBIO() 함수 호출
Ernie.printBIO()

#결과: 
'Ernie 직원은 나이가 23이고, 성별은 남자입니다'